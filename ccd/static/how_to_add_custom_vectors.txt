Custom LIC vectors can be added to the file

<ccd_path>/ccd/static/custom_vectors.json

custom_vectors.json follows the syntax:

1 - The first and last line must be an open and a closed square bracket,
respectively

2 - Each vector is specified with attribute : value pairs, comma separated
	No comma is present after the last attribute:value pair. See section II for an
	explanation of what each pair encodes.
	the name of each attribute is between inverted commas
	the value of each attribute is of the following type
	
		"Nt_tag": 		 boolean
		"Ct_tag": 		 boolean
		"add_left": 	 string or empty string ("")
		"add_right":	 string or empty string ("")
		"cut_left": 	 integer
		"cut_right":	 integer
		"filename": 	 string
		"name": 		 string
		"short_name": 	 string

	Allowed boolean values are:
		true
		false
		
	Integer values are specified with a number without inverted commas 
	String values must be between inverted commas
	add_left and add_right only accept valid DNA sequences (i.e. only ACGT characters)
	
3 - All attribute:value pairs must be filled in. 
	See section 1 for details about their meaning 

4 - Each vector is enclosed between curly brackets

5 - If multiple vectors are specified, they must be separated by a single comma.

6 - There is no comma after the last vector in the list, and before the 
    closing right square bracket
    
In other words, the JSON file encodes a list of dictionaries to be read by python.
An example of a correctly formatted file is shown in Section 2

---- Section 1 -----
Meaning of each attribute:value pair

Nt_tag (true|false):

Specifies if the vector encodes for a N-terminal tag to be added to the construct.
If true, CCD2 will search for the longest, uninterrupted ORF that can be fused in-frame
to the construct to be cloned. 

Ct_tag (true|false):

Specifies if the vector encodes for a N-terminal tag to be added to the construct.
If true, CCD2 will extend the ORF encoded by the construct to the C-terminus (or 3')
until a stop codon is encountered

cut_left (integer) & cut_right (integer)

After linearization and LIC digestion, the vector will display single strand overhangs 
at 3' and 5'. cut_left specifies the position in the original vector map/sequence 
where the single strand overhang starts; cut right specifies the position at which
the 3' single strand overhang ends, i.e.:

	cut_left						cut_right	
       	X								X	
5' CCGCTAAGGGCACA - 3'               5' TCGCAAG - 3'
3' GGCGA - 5'	           3' - ACGTGAGGAGCGTTC - 5'

add_left (integer) and add_right (integer)

after annealing with the primer, some extra base pairs might be added to the final
construct that were not present in the original vector (i.e. were in the primers).
add_left specifies bases that are added 5' to the insert; add_right bases added at 3'.
If no bases are added, use the empty string ("") as value

vector_name (string)
The name under which your vector will be displayed in CCD (primer design panel)

short_name (string)
The name that CCD will use in the Plasmid maps and Polypeptides panels 

filename (string):
the name of the (annotated) map, in genbank format, that contains the sequence of the
vector. All map files must be in the folder

<ccd_path>/ccd/static/plasmid_maps





---- Section 2 -----    
The following lines are an example of a properly formatted custom_vectors.json

[
{
    	"Nt_tag": true,
        "Ct_tag": false,
        "add_left": "ATGCCG",
        "add_right": "CCTG",
        "cut_left": 150,
        "cut_right": 156,
        "filename": "vector1_map.gb",
        "name": "vector1",
        "short_name": "v1"
},

{
    	"Nt_tag": false,
        "Ct_tag": true,
        "add_left": "",
        "add_right": "CC",
        "cut_left": 100,
        "cut_right": 200,
        "filename": "vector2_map.gb",
        "name": "vector2",
        "short_name": "v2"
},
{
    	"Nt_tag": false,
        "Ct_tag": false,
        "add_left": "",
        "add_right": "",
        "cut_left": 123,
        "cut_right": 124,
        "filename": "vector3_map.gb",
        "name": "vector3",
        "short_name": "v3"
}
] 
  
 